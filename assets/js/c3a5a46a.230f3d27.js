(globalThis.webpackChunkgeocortex_dev_center=globalThis.webpackChunkgeocortex_dev_center||[]).push([[637],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>l,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),d=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(n),h=r,m=u["".concat(c,".").concat(h)]||u[h]||p[h]||a;return n?o.createElement(m,i(i({ref:t},l),{},{components:n})):o.createElement(m,i({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<a;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1103:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>a,contentTitle:()=>i,metadata:()=>s,toc:()=>c,default:()=>l});var o=n(2122),r=(n(7294),n(3905));const a={title:"Component Hooks",description:"VertiGIS Studio Web - Learn about the React hooks used to react to changes on a component's model"},i=void 0,s={unversionedId:"web/sdk-components-hooks",id:"web/sdk-components-hooks",isDocsHomePage:!1,title:"Component Hooks",description:"VertiGIS Studio Web - Learn about the React hooks used to react to changes on a component's model",source:"@site/docs/web/sdk-components-hooks.mdx",sourceDirName:"web",slug:"/web/sdk-components-hooks",permalink:"/docs/web/sdk-components-hooks",editUrl:"https://github.com/geocortex/dev-center/edit/master/docs/web/sdk-components-hooks.mdx",version:"current",frontMatter:{title:"Component Hooks",description:"VertiGIS Studio Web - Learn about the React hooks used to react to changes on a component's model"},sidebar:"web",previous:{title:"Component Reference",permalink:"/docs/web/sdk-components-reference"},next:{title:"UIContext",permalink:"/docs/web/sdk-components-ui-context"}},c=[{value:"<code>useWatchAndRerender</code>",id:"usewatchandrerender",children:[{value:"The Problem",id:"the-problem",children:[]},{value:"The Solution",id:"the-solution",children:[]}]},{value:"<code>useWatchCollectionAndRerender</code>",id:"usewatchcollectionandrerender",children:[]},{value:"<code>useWatch</code>",id:"usewatch",children:[]},{value:"<code>useSubscribeAndRerender</code>",id:"usesubscribeandrerender",children:[]},{value:"<code>useSubscribe</code>",id:"usesubscribe",children:[]}],d={toc:c};function l({components:e,...t}){return(0,r.kt)("wrapper",(0,o.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"VertiGIS Studio Web provides a number of ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-intro.html"},"React hooks")," to ease development of custom components bound to ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/sdk-components-reference#models"},"models"),". These hooks make it simple to follow the recommended ",(0,r.kt)("a",{parentName:"p",href:"https://developers.arcgis.com/javascript/latest/guide/programming-patterns/#properties"},"observable properties pattern")," for model interactions within your functional components."),(0,r.kt)("h2",{id:"usewatchandrerender"},(0,r.kt)("inlineCode",{parentName:"h2"},"useWatchAndRerender")),(0,r.kt)("p",null,"Watches an object for changes in one or more properties of a component model and triggers a re-render of the component."),(0,r.kt)("h3",{id:"the-problem"},"The Problem"),(0,r.kt)("p",null,"In VertiGIS Studio Web, ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/sdk-components-reference#models"},"component models")," provide a way to decouple components from data source concerns and app interactions. However, they raise the issue of consistency - how can a component stay up to date with changes in the data of the underlying model? E.g. how does the React component know when to re-render?"),(0,r.kt)("h3",{id:"the-solution"},"The Solution"),(0,r.kt)("p",null,"VertiGIS Studio Web components solve this problem by providing a way to update the UI when the data in the underlying model changes using a React hook called ",(0,r.kt)("inlineCode",{parentName:"p"},"useWatchAndRerender"),". The component render lifecycle is as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The initial data is pulled from the model and rendered."),(0,r.kt)("li",{parentName:"ol"},"The component ",(0,r.kt)("strong",{parentName:"li"},"starts to watch for changes")," to the specified properties on the model by using the ",(0,r.kt)("inlineCode",{parentName:"li"},"useWatchAndRerender")," React hook."),(0,r.kt)("li",{parentName:"ol"},"The value of the watched property in the model changes. In the example below it changes as a result of a button click."),(0,r.kt)("li",{parentName:"ol"},"The hook that is watching the property value for changes causes the component to re-render with the new property value.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useWatchAndRerender } from "@vertigis/web/ui";\nimport Typography from "@vertigis/web/ui/Typography";\nimport React from "react";\nimport { LayoutElement } from "@vertigis/web/components";\nimport Button from "@vertigis/web/ui/Button";\n\nexport default function CustomComponent(props) {\n    const { model } = props;\n\n    // Start watching for changes to the hidden property on the model\n    useWatchAndRerender(model, "hidden");\n\n    return (\n        <LayoutElement {...props}>\n            {/* Change the underlying model to trigger a re-render */}\n            {model.hidden && (\n                <Button onClick={() => (model.hidden = false)}>\n                    Show Me\n                </Button>\n            )}\n            {!model.hidden && (\n                <div>\n                    <Typography variant="h1">BOO!</Typography>\n                    <Button onClick={() => (model.hidden = true)}>\n                        Hide Me\n                    </Button>\n                </div>\n            )}\n        </LayoutElement>\n    );\n}\n')),(0,r.kt)("p",null,'The role of the "watch" functions for a component with respect to model data is similar to the role of the ',(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-state.html"},(0,r.kt)("inlineCode",{parentName:"a"},"useState")," and ",(0,r.kt)("inlineCode",{parentName:"a"},"useEffect")," functions")," with respect to the local state data. The ",(0,r.kt)("inlineCode",{parentName:"p"},"useWatchAndRenderer")," function essentially defines a model property as state your component's presentation is dependent upon, much like ",(0,r.kt)("inlineCode",{parentName:"p"},"useState"),", while leaving you the responsibility to update the underlying component when appropriate. The ",(0,r.kt)("inlineCode",{parentName:"p"},"useWatch")," function defines a dependency on a model property, while leaving you to define what side effects are required, much like ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect"),"."),(0,r.kt)("h2",{id:"usewatchcollectionandrerender"},(0,r.kt)("inlineCode",{parentName:"h2"},"useWatchCollectionAndRerender")),(0,r.kt)("p",null,"Watches a collection for change events and triggers a re-render. Conceptually equivalent to ",(0,r.kt)("a",{parentName:"p",href:"#usewatchandrerender"},(0,r.kt)("inlineCode",{parentName:"a"},"useWatchAndRerender"))," but specifically for ",(0,r.kt)("a",{parentName:"p",href:"https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html"},"Collection objects"),"."),(0,r.kt)("h2",{id:"usewatch"},(0,r.kt)("inlineCode",{parentName:"h2"},"useWatch")),(0,r.kt)("p",null,"Watches an object for changes in one or more properties and triggers a callback."),(0,r.kt)("h2",{id:"usesubscribeandrerender"},(0,r.kt)("inlineCode",{parentName:"h2"},"useSubscribeAndRerender")),(0,r.kt)("p",null,"Subscribes ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/sdk-events-overview"},"to an event")," and triggers a re-render."),(0,r.kt)("h2",{id:"usesubscribe"},(0,r.kt)("inlineCode",{parentName:"h2"},"useSubscribe")),(0,r.kt)("p",null,"Subscribes ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/sdk-events-overview"},"to an event")," and triggers a callback."))}l.isMDXComponent=!0}}]);