(globalThis.webpackChunkgeocortex_dev_center=globalThis.webpackChunkgeocortex_dev_center||[]).push([[4576],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),m=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(a.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=m(n),f=o,h=u["".concat(a,".").concat(f)]||u[f]||c[f]||l;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=u;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var m=2;m<l;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5829:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>l,contentTitle:()=>i,metadata:()=>s,toc:()=>a,default:()=>p});var r=n(2122),o=(n(7294),n(3905));const l={title:"Workflow Form Element Reference",sidebar_label:"Form Element Reference",description:"VertiGIS Studio Workflow - Reference for workflow form elements for web applications"},i=void 0,s={unversionedId:"workflow/sdk-web-form-reference",id:"workflow/sdk-web-form-reference",isDocsHomePage:!1,title:"Workflow Form Element Reference",description:"VertiGIS Studio Workflow - Reference for workflow form elements for web applications",source:"@site/docs/workflow/sdk-web-form-reference.mdx",sourceDirName:"workflow",slug:"/workflow/sdk-web-form-reference",permalink:"/docs/workflow/sdk-web-form-reference",editUrl:"https://github.com/geocortex/dev-center/edit/master/docs/workflow/sdk-web-form-reference.mdx",version:"current",frontMatter:{title:"Workflow Form Element Reference",sidebar_label:"Form Element Reference",description:"VertiGIS Studio Workflow - Reference for workflow form elements for web applications"},sidebar:"workflow",previous:{title:"Activity Reference",permalink:"/docs/workflow/sdk-web-activity-reference"},next:{title:"Integrating the ArcGIS API for JavaScript",permalink:"/docs/workflow/sdk-web-integrating-the-arcgis-api"}},a=[{value:"Styling Form Elements",id:"styling-form-elements",children:[{value:"Inline CSS",id:"inline-css",children:[]},{value:"CSS File",id:"css-file",children:[]}]},{value:"Properties of Form Elements",id:"properties-of-form-elements",children:[{value:"<code>value</code>",id:"value",children:[]},{value:"Custom Public Properties",id:"custom-public-properties",children:[]},{value:"Internal State",id:"internal-state",children:[]}]},{value:"Raising Events",id:"raising-events",children:[]}],m={toc:a};function p({components:e,...t}){return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"styling-form-elements"},"Styling Form Elements"),(0,o.kt)("p",null,"A custom form element can be styled using CSS in a few different ways:"),(0,o.kt)("h3",{id:"inline-css"},"Inline CSS"),(0,o.kt)("p",null,"Inline CSS is the simplest way to style your elements, but doesn't have the same flexibility as a CSS style sheet."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const CustomFormElement = (props: FormElementProps) => (\n    // highlight-next-line\n    <button style={{ backgroundColor: "blue", color: "white" }}>\n        Click me\n    </button>\n);\n')),(0,o.kt)("h3",{id:"css-file"},"CSS File"),(0,o.kt)("p",null,"You can separate your element styles into a separate CSS style sheet alongside your element. It is important that you import your CSS file within your component for the styles to be injected at runtime."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// highlight-next-line\nimport "./CustomFormElement.css";\n\nconst CustomFormElement = (props: FormElementProps) => (\n    // highlight-next-line\n    <button className="CustomFormElement-button">Click me</button>\n);\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="CustomFormElement.css"',title:'"CustomFormElement.css"'},".CustomFormElement-button {\n    background-color: blue;\n    color: white;\n}\n")),(0,o.kt)("h2",{id:"properties-of-form-elements"},"Properties of Form Elements"),(0,o.kt)("h3",{id:"value"},(0,o.kt)("inlineCode",{parentName:"h3"},"value")),(0,o.kt)("p",null,"A custom form element may produce a ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," that a workflow needs to access at runtime. To update the ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," of your element, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"setValue()")," API provided on the ",(0,o.kt)("inlineCode",{parentName:"p"},"props")," interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport {\n    FormElementProps,\n    FormElementRegistration,\n} from "@geocortex/workflow/runtime";\n\n// We\'ve declared the type of `value` to be `string` here.\n// highlight-next-line\ninterface CustomFormElementProps extends FormElementProps<string> {}\n\nconst CustomFormElement = (props: CustomFormElementProps) => (\n    <input\n        onChange={(event) =>\n            // highlight-next-line\n            props.setValue(event.currentTarget.value)\n        }\n        // highlight-next-line\n        value={props.value}\n    />\n);\n')),(0,o.kt)("p",null,"You can then use the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.geocortex.com/workflow/latest/help/Default.htm#wf5/help/activities/get-form-element-property.htm"},"Get Form Element Property")," activity to access the ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," property, along with ",(0,o.kt)("a",{parentName:"p",href:"https://docs.geocortex.com/workflow/latest/help/Default.htm#wf5/help/form-elements/custom.htm#Custom_Form_Element_Properties%3FTocPath%3DForms%7CForm%2520Element%2520Reference%7CCustom%2520Form%2520Elements%7C_____1"},"other properties supported by custom form elements"),"."),(0,o.kt)("h3",{id:"custom-public-properties"},"Custom Public Properties"),(0,o.kt)("p",null,"You can declare additional properties on your ",(0,o.kt)("inlineCode",{parentName:"p"},"props")," interface that should be publicly accessible in the workflow."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n    FormElementProps,\n    FormElementRegistration,\n} from "@geocortex/workflow/runtime";\n\ninterface CustomFormElementProps extends FormElementProps<string> {\n    // highlight-next-line\n    value2: string;\n}\n\nconst CustomFormElement = (props: CustomFormElementProps) => {\n    return (\n        <div>\n            <input\n                onChange={(event) =>\n                    props.setValue(event.currentTarget.value)\n                }\n                value={props.value}\n            />\n            <input\n                onChange={(event) =>\n                    // highlight-next-line\n                    props.setProperty(\n                        // highlight-next-line\n                        "value2",\n                        // highlight-next-line\n                        event.currentTarget.value\n                        // highlight-next-line\n                    )\n                }\n                // highlight-next-line\n                value={props.value2}\n            />\n        </div>\n    );\n};\n')),(0,o.kt)("h3",{id:"internal-state"},"Internal State"),(0,o.kt)("p",null,"For any state that you need to maintain for your element that ",(0,o.kt)("em",{parentName:"p"},"doesn't")," need to be public, you can use ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-state.html"},"React component state")," to store your state locally within your element."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useState } from "react";\nimport {\n    FormElementProps,\n    FormElementRegistration,\n} from "@geocortex/workflow/runtime";\n\ninterface CustomFormElementProps extends FormElementProps<string> {}\n\nconst CustomFormElement = (props: CustomFormElementProps) => {\n    // highlight-next-line\n    const [showInput, setShowInput] = useState(true);\n\n    return (\n        <div>\n            // highlight-next-line\n            <button onClick={() => setShowInput(!showInput)}>\n                Toggle input\n            </button>\n            // highlight-next-line\n            {showInput && (\n                <input\n                    onChange={(event) =>\n                        props.setValue(event.currentTarget.value)\n                    }\n                    value={props.value}\n                />\n            )}\n        </div>\n    );\n};\n')),(0,o.kt)("h2",{id:"raising-events"},"Raising Events"),(0,o.kt)("p",null,"Workflow form elements can raise ",(0,o.kt)("a",{parentName:"p",href:"https://docs.geocortex.com/workflow/latest/help/Default.htm#wf5/help/forms.htm#Events%3FTocPath%3DForms%7COverview%2520of%2520Forms%7CEvents%7C_____0"},"events"),". A custom form element can also raise a ",(0,o.kt)("inlineCode",{parentName:"p"},"custom")," event."),(0,o.kt)("p",null,"Events are raised through the ",(0,o.kt)("inlineCode",{parentName:"p"},"raiseEvent()")," function on the element ",(0,o.kt)("inlineCode",{parentName:"p"},"props"),". The following custom form element demonstrates how events can be raised."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'/**\n * A simple React Component that demonstrates raising events.\n */\nconst CustomFormElement = (props: FormElementProps) => {\n    const raiseCustom = (event) => {\n        // Raise the custom event with a custom event value.\n        // The event value is arbitrary and can be defined\n        // however you would like.\n        const eventValue = {\n            customEventType: "custom1",\n            data: new Date(),\n        };\n\n        props.raiseEvent("custom", eventValue);\n    };\n\n    return (\n        <div>\n            <p>A simple custom form element</p>\n            <button onClick={raiseCustom}>Raise custom event</button>\n        </div>\n    );\n};\n')))}p.isMDXComponent=!0}}]);